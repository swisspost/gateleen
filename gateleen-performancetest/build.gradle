buildscript {
    repositories {
        try {
            maven { url "$repository" }
            println 'buildscript: use custom repository: ' + "$repository"
        } catch (Exception e) {
            maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        }
        mavenCentral()
    }
    dependencies {
        classpath "org.codehaus.groovy.modules.http-builder:http-builder:0.7.1"
    }
}

import groovyx.net.http.RESTClient

apply plugin: "java"
apply plugin: "scala"

sourceCompatibility = "1.8"
targetCompatibility = "1.8"
[compileJava, compileTestJava]*.options*.encoding = "UTF-8"

group 'org.swisspush.gateleen'
version '1.0-SNAPSHOT'

repositories {
    try {
        maven { url "$repository" }
        println 'buildscript: use custom repository: ' + "$repository"
    } catch (Exception e) {
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }
    mavenCentral()
}

dependencies {
    testCompile "io.gatling.highcharts:gatling-charts-highcharts:2.1.6"
}

task gatling(type: JavaExec) {
    dependsOn testClasses
    description = "load test with Gatling"
    group = "Load Test"
    classpath = sourceSets.test.runtimeClasspath

    jvmArgs = [
            // workaround for https://github.com/gatling/gatling/issues/2689
            "-Dgatling.core.directory.binaries=${sourceSets.test.output.classesDir.toString()}",
            "-Dlogback.configurationFile=${logbackGatlingConfig()}",
            "-DtargetHost=${getTargetHost(project)}",
            "-DtargetPort=${getTargetPort(project)}",
            "-DnumberOfUsers=${getNumberOfUsers(project)}",
            "-DrampUpTime=${getRampUpTime(project)}",
            "-DloginUser=${getLoginUser(project)}",
            "-DloginPassword=${getLoginPassword(project)}"
    ]
    main = "io.gatling.app.Gatling"
    args = [
            "--simulation", "$simulation",
            "--results-folder", "${buildDir}/gatling-results",
            "--binaries-folder", sourceSets.test.output.classesDir.toString(), // ignored because of above bug
            "--bodies-folder", sourceSets.test.resources.srcDirs.toList().first().toString() + "/bodies",
            "--data-folder", sourceSets.test.resources.srcDirs.toList().first().toString() + "/data"
    ]
}

def getTargetHost(project){
    if(project.hasProperty("targetHost")){
        return "$targetHost"
    } else {
        return "localhost"
    }
}

def getTargetPort(project){
    if(project.hasProperty("targetPort")){
        return "$targetPort"
    } else {
        return "0"
    }
}

def getNumberOfUsers(project){
    if(project.hasProperty("numberOfUsers")){
        return "$numberOfUsers"
    } else {
        return "1"
    }
}

def getRampUpTime(project){
    if(project.hasProperty("rampUpTime")){
        return "$rampUpTime"
    } else {
        return "1"
    }
}

def getLoginUser(project){
    if(project.hasProperty("loginUser")){
        return "$loginUser"
    } else {
        return ""
    }
}

def getLoginPassword(project){
    if(project.hasProperty("loginPassword")){
        return "$loginPassword"
    } else {
        return ""
    }
}

def logbackGatlingConfig() {
    return sourceSets.test.resources.find { it.name == 'logback.xml' };
}

task uploadStaticFiles << {
    def serverUrl = 'http://'+project.targetHost+':'+project.targetPort+'/'
    println 'About to upload server resources to ' + serverUrl
    def rest = new RESTClient( serverUrl )
    FileTree tree = fileTree('src/server/resources')
    tree.each {File file ->
        println file.name
        def path = file.toURI().getPath().split("src/server/resources/")[1]
        def resp = rest.put(path: path, body: file.bytes, requestContentType: 'application/octet-stream')
        println resp.statusLine
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}