buildscript {
    repositories {

        try {
            maven { url "$repository" }
            println 'use custom plugin repository: ' + "$repository"
        } catch(Exception e) {
            maven { url "https://plugins.gradle.org/m2/" }
            println 'use standard plugin repository'
        }
        maven {
            url "http://artifactory.pnet.ch/artifactory/swisspost/"
        }
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:1.2.3"
        classpath "org.codehaus.groovy.modules.http-builder:http-builder:0.7.1"
    }
}
import groovyx.net.http.RESTClient

apply plugin: 'com.github.johnrengelman.shadow'

if (!project.hasProperty('targetHost')) {
    ext.targetHost = 'localhost'
} else {
    println 'got property targetHost: ' + targetHost
}

if (!project.hasProperty('targetPort')) {
    ext.targetPort = '7012'
} else {
    println 'got property targetPort: ' + targetPort
}

shadowJar {
    archiveName="playground.jar"
    manifest {
        attributes 'Main-Class': 'org.swisspush.gateleen.playground.Server'
    }
}
build.finalizedBy(shadowJar)

dependencies {
    compile project(':gateleen-core')
    compile project(':gateleen-logging')
    compile project(':gateleen-monitoring')
    compile project(':gateleen-runconfig')
    compile project(':gateleen-routing')
    compile project(':gateleen-scheduler')
    compile project(':gateleen-validation')
    compile project(':gateleen-hook')
    compile project(':gateleen-packing')
    compile project(':gateleen-user')
    compile project(':gateleen-queue')
    compile project(':gateleen-expansion')
    compile project(':gateleen-delta')
    compile project(':gateleen-security')
    compile project(':gateleen-qos')
    compile project(':gateleen-delegate')
    compile "org.swisspush:redisques:$redisquesVersion"
    compile "org.swisspush:rest-storage:$reststorageVersion"
    compile "org.swisspush:mod-metrics:$modmetricsVersion"
    compile "com.codahale.metrics:metrics-core:$metricCoreVersion"
    compile "io.vertx:vertx-core:$vertxVersion"
    compile "io.vertx:vertx-web:$vertxVersion"
    compile "io.vertx:vertx-redis-client:$vertxVersion"
    compile "commons-lang:commons-lang:$commonsLangVersion"
    compile "org.springframework:spring-core:$springframeworkVersion"
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    compile "org.slf4j:slf4j-log4j12:$slf4jVersion"
    compile "log4j:log4j:$log4jVersion"
}

task uploadStaticFiles << {
    def serverUrl = 'http://'+project.targetHost+':'+project.targetPort+'/'
    println 'About to upload server resources to ' + serverUrl
    def rest = new RESTClient( serverUrl )
    FileTree tree = fileTree('src/main/resources')
    tree.each {File file ->
        println file.name
        def path = file.toURI().getPath().split("src/main/resources/")[1]
        def resp = rest.put(path: path, body: file.bytes, requestContentType: 'application/octet-stream')
        println resp.statusLine
    }
}